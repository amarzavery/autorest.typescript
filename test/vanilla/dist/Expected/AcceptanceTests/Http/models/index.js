"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Defines values for Location.
 * Possible values include: '/http/success/head/200'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Location = <Location>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Location;
(function (Location) {
    Location["Httpsuccesshead200"] = "/http/success/head/200";
})(Location = exports.Location || (exports.Location = {}));
/**
 * Defines values for Location1.
 * Possible values include: '/http/success/get/200'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Location1 = <Location1>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Location1;
(function (Location1) {
    Location1["Httpsuccessget200"] = "/http/success/get/200";
})(Location1 = exports.Location1 || (exports.Location1 = {}));
/**
 * Defines values for Location2.
 * Possible values include: '/http/success/head/200'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Location2 = <Location2>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Location2;
(function (Location2) {
    Location2["Httpsuccesshead200"] = "/http/success/head/200";
})(Location2 = exports.Location2 || (exports.Location2 = {}));
/**
 * Defines values for Location3.
 * Possible values include: '/http/success/get/200'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Location3 = <Location3>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Location3;
(function (Location3) {
    Location3["Httpsuccessget200"] = "/http/success/get/200";
})(Location3 = exports.Location3 || (exports.Location3 = {}));
/**
 * Defines values for Location4.
 * Possible values include: '/http/failure/500'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Location4 = <Location4>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Location4;
(function (Location4) {
    Location4["Httpfailure500"] = "/http/failure/500";
})(Location4 = exports.Location4 || (exports.Location4 = {}));
/**
 * Defines values for Location5.
 * Possible values include: '/http/success/head/200'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Location5 = <Location5>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Location5;
(function (Location5) {
    Location5["Httpsuccesshead200"] = "/http/success/head/200";
})(Location5 = exports.Location5 || (exports.Location5 = {}));
/**
 * Defines values for Location6.
 * Possible values include: '/http/success/get/200'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Location6 = <Location6>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Location6;
(function (Location6) {
    Location6["Httpsuccessget200"] = "/http/success/get/200";
})(Location6 = exports.Location6 || (exports.Location6 = {}));
/**
 * Defines values for Location7.
 * Possible values include: '/http/failure/500'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Location7 = <Location7>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Location7;
(function (Location7) {
    Location7["Httpfailure500"] = "/http/failure/500";
})(Location7 = exports.Location7 || (exports.Location7 = {}));
/**
 * Defines values for Location8.
 * Possible values include: '/http/success/get/200'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Location8 = <Location8>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Location8;
(function (Location8) {
    Location8["Httpsuccessget200"] = "/http/success/get/200";
})(Location8 = exports.Location8 || (exports.Location8 = {}));
/**
 * Defines values for Location9.
 * Possible values include: '/http/success/head/200'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Location9 = <Location9>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Location9;
(function (Location9) {
    Location9["Httpsuccesshead200"] = "/http/success/head/200";
})(Location9 = exports.Location9 || (exports.Location9 = {}));
/**
 * Defines values for Location10.
 * Possible values include: '/http/success/get/200'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Location10 = <Location10>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Location10;
(function (Location10) {
    Location10["Httpsuccessget200"] = "/http/success/get/200";
})(Location10 = exports.Location10 || (exports.Location10 = {}));
/**
 * Defines values for Location11.
 * Possible values include: '/http/success/put/200'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Location11 = <Location11>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Location11;
(function (Location11) {
    Location11["Httpsuccessput200"] = "/http/success/put/200";
})(Location11 = exports.Location11 || (exports.Location11 = {}));
/**
 * Defines values for Location12.
 * Possible values include: '/http/success/patch/200'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Location12 = <Location12>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Location12;
(function (Location12) {
    Location12["Httpsuccesspatch200"] = "/http/success/patch/200";
})(Location12 = exports.Location12 || (exports.Location12 = {}));
/**
 * Defines values for Location13.
 * Possible values include: '/http/success/post/200'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Location13 = <Location13>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Location13;
(function (Location13) {
    Location13["Httpsuccesspost200"] = "/http/success/post/200";
})(Location13 = exports.Location13 || (exports.Location13 = {}));
/**
 * Defines values for Location14.
 * Possible values include: '/http/success/delete/200'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Location14 = <Location14>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Location14;
(function (Location14) {
    Location14["Httpsuccessdelete200"] = "/http/success/delete/200";
})(Location14 = exports.Location14 || (exports.Location14 = {}));
//# sourceMappingURL=index.js.map